/* Generated by wayland-scanner 1.20.0 */

#ifndef SWC_CLIENT_PROTOCOL_H
#define SWC_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_swc The swc protocol
 * @section page_ifaces_swc Interfaces
 * - @subpage page_iface_swc_screen - an area in which windows may be placed
 * - @subpage page_iface_swc_panel_manager - 
 * - @subpage page_iface_swc_panel - 
 * @section page_copyright_swc Copyright
 * <pre>
 *
 * Copyright (c) 2013, 2014 Michael Forney
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * </pre>
 */
struct swc_panel;
struct swc_panel_manager;
struct swc_screen;
struct wl_surface;

#ifndef SWC_SCREEN_INTERFACE
#define SWC_SCREEN_INTERFACE
/**
 * @page page_iface_swc_screen swc_screen
 * @section page_iface_swc_screen_desc Description
 *
 * A screen represents an area in which windows may be placed. It
 * corresponds to one or monitors displaying the same content (in
 * mirror mode).
 * @section page_iface_swc_screen_api API
 * See @ref iface_swc_screen.
 */
/**
 * @defgroup iface_swc_screen The swc_screen interface
 *
 * A screen represents an area in which windows may be placed. It
 * corresponds to one or monitors displaying the same content (in
 * mirror mode).
 */
extern const struct wl_interface swc_screen_interface;
#endif
#ifndef SWC_PANEL_MANAGER_INTERFACE
#define SWC_PANEL_MANAGER_INTERFACE
/**
 * @page page_iface_swc_panel_manager swc_panel_manager
 * @section page_iface_swc_panel_manager_api API
 * See @ref iface_swc_panel_manager.
 */
/**
 * @defgroup iface_swc_panel_manager The swc_panel_manager interface
 */
extern const struct wl_interface swc_panel_manager_interface;
#endif
#ifndef SWC_PANEL_INTERFACE
#define SWC_PANEL_INTERFACE
/**
 * @page page_iface_swc_panel swc_panel
 * @section page_iface_swc_panel_api API
 * See @ref iface_swc_panel.
 */
/**
 * @defgroup iface_swc_panel The swc_panel interface
 */
extern const struct wl_interface swc_panel_interface;
#endif



/** @ingroup iface_swc_screen */
static inline void
swc_screen_set_user_data(struct swc_screen *swc_screen, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) swc_screen, user_data);
}

/** @ingroup iface_swc_screen */
static inline void *
swc_screen_get_user_data(struct swc_screen *swc_screen)
{
	return wl_proxy_get_user_data((struct wl_proxy *) swc_screen);
}

static inline uint32_t
swc_screen_get_version(struct swc_screen *swc_screen)
{
	return wl_proxy_get_version((struct wl_proxy *) swc_screen);
}

/** @ingroup iface_swc_screen */
static inline void
swc_screen_destroy(struct swc_screen *swc_screen)
{
	wl_proxy_destroy((struct wl_proxy *) swc_screen);
}

#define SWC_PANEL_MANAGER_CREATE_PANEL 0


/**
 * @ingroup iface_swc_panel_manager
 */
#define SWC_PANEL_MANAGER_CREATE_PANEL_SINCE_VERSION 1

/** @ingroup iface_swc_panel_manager */
static inline void
swc_panel_manager_set_user_data(struct swc_panel_manager *swc_panel_manager, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) swc_panel_manager, user_data);
}

/** @ingroup iface_swc_panel_manager */
static inline void *
swc_panel_manager_get_user_data(struct swc_panel_manager *swc_panel_manager)
{
	return wl_proxy_get_user_data((struct wl_proxy *) swc_panel_manager);
}

static inline uint32_t
swc_panel_manager_get_version(struct swc_panel_manager *swc_panel_manager)
{
	return wl_proxy_get_version((struct wl_proxy *) swc_panel_manager);
}

/** @ingroup iface_swc_panel_manager */
static inline void
swc_panel_manager_destroy(struct swc_panel_manager *swc_panel_manager)
{
	wl_proxy_destroy((struct wl_proxy *) swc_panel_manager);
}

/**
 * @ingroup iface_swc_panel_manager
 */
static inline struct swc_panel *
swc_panel_manager_create_panel(struct swc_panel_manager *swc_panel_manager, struct wl_surface *surface)
{
	struct wl_proxy *id;

	id = wl_proxy_marshal_flags((struct wl_proxy *) swc_panel_manager,
			 SWC_PANEL_MANAGER_CREATE_PANEL, &swc_panel_interface, wl_proxy_get_version((struct wl_proxy *) swc_panel_manager), 0, NULL, surface);

	return (struct swc_panel *) id;
}

#ifndef SWC_PANEL_EDGE_ENUM
#define SWC_PANEL_EDGE_ENUM
enum swc_panel_edge {
	SWC_PANEL_EDGE_TOP = 0,
	SWC_PANEL_EDGE_BOTTOM = 1,
	SWC_PANEL_EDGE_LEFT = 2,
	SWC_PANEL_EDGE_RIGHT = 3,
};
#endif /* SWC_PANEL_EDGE_ENUM */

/**
 * @ingroup iface_swc_panel
 * @struct swc_panel_listener
 */
struct swc_panel_listener {
	/**
	 */
	void (*docked)(void *data,
		       struct swc_panel *swc_panel,
		       uint32_t length);
};

/**
 * @ingroup iface_swc_panel
 */
static inline int
swc_panel_add_listener(struct swc_panel *swc_panel,
		       const struct swc_panel_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) swc_panel,
				     (void (**)(void)) listener, data);
}

#define SWC_PANEL_DOCK 0
#define SWC_PANEL_SET_OFFSET 1
#define SWC_PANEL_SET_STRUT 2

/**
 * @ingroup iface_swc_panel
 */
#define SWC_PANEL_DOCKED_SINCE_VERSION 1

/**
 * @ingroup iface_swc_panel
 */
#define SWC_PANEL_DOCK_SINCE_VERSION 1
/**
 * @ingroup iface_swc_panel
 */
#define SWC_PANEL_SET_OFFSET_SINCE_VERSION 1
/**
 * @ingroup iface_swc_panel
 */
#define SWC_PANEL_SET_STRUT_SINCE_VERSION 1

/** @ingroup iface_swc_panel */
static inline void
swc_panel_set_user_data(struct swc_panel *swc_panel, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) swc_panel, user_data);
}

/** @ingroup iface_swc_panel */
static inline void *
swc_panel_get_user_data(struct swc_panel *swc_panel)
{
	return wl_proxy_get_user_data((struct wl_proxy *) swc_panel);
}

static inline uint32_t
swc_panel_get_version(struct swc_panel *swc_panel)
{
	return wl_proxy_get_version((struct wl_proxy *) swc_panel);
}

/** @ingroup iface_swc_panel */
static inline void
swc_panel_destroy(struct swc_panel *swc_panel)
{
	wl_proxy_destroy((struct wl_proxy *) swc_panel);
}

/**
 * @ingroup iface_swc_panel
 */
static inline void
swc_panel_dock(struct swc_panel *swc_panel, uint32_t edge, struct swc_screen *screen, uint32_t focus)
{
	wl_proxy_marshal_flags((struct wl_proxy *) swc_panel,
			 SWC_PANEL_DOCK, NULL, wl_proxy_get_version((struct wl_proxy *) swc_panel), 0, edge, screen, focus);
}

/**
 * @ingroup iface_swc_panel
 */
static inline void
swc_panel_set_offset(struct swc_panel *swc_panel, uint32_t offset)
{
	wl_proxy_marshal_flags((struct wl_proxy *) swc_panel,
			 SWC_PANEL_SET_OFFSET, NULL, wl_proxy_get_version((struct wl_proxy *) swc_panel), 0, offset);
}

/**
 * @ingroup iface_swc_panel
 */
static inline void
swc_panel_set_strut(struct swc_panel *swc_panel, uint32_t size, uint32_t begin, uint32_t end)
{
	wl_proxy_marshal_flags((struct wl_proxy *) swc_panel,
			 SWC_PANEL_SET_STRUT, NULL, wl_proxy_get_version((struct wl_proxy *) swc_panel), 0, size, begin, end);
}

#ifdef  __cplusplus
}
#endif

#endif
